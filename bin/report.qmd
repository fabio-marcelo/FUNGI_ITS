---
title: ""
execute:
  cache: true
  freeze: auto
params:
  fastqc_dir: ""
  folder_full: ""
author: ""
date: "`r Sys.Date()`"
format:
    html:
      toc-title: Table of contents
      toc: true
      toc-depth: 2
      number-sections: true
      highlight-style: github
      toc-location: body
      cap-location: top
      page-layout: full
      embed-resources: true
      self-contained-math: true
      toc-expand: true
editor: visual
---


```{r packages}
#| echo: false
#| message: false
#| warning: false
#| code-fold: true



# # # install
# q = c("BiocManager")
# for (pacote in q) {
#   #if(!require(q,character.only = TRUE)) utils::install.packages(q)
#     library(q,character.only = TRUE)
# }
# 
# requiredPackages = c('rmarkdown', 'tidyverse', 'BiocManager', 'fastqcr', 'dplyr', 'pander', 'tidyr', 'remotes', 'ggplot2', 'data.table', 'plyr', 'devtools', 'vegan', 'stats', 'cluster',
#                      'foreign', 'lattice', 'MASS', 'Matrix', 'mgcv', 'nlme', 'rpart', 'quarto', 'cowplot')
# 
# 
# for(p in requiredPackages){
#   #if(!require(p,character.only = TRUE)) install.packages(p,dependencies = T)
#   library(p,character.only = TRUE)
# }
# 
# Packages = c("phyloseq", "DESeq2", "ShortRead", "Biostrings", "qiime2R", "ngsReports", "ComplexHeatmap", 
#              "microbiome", "dada2", "DECIPHER")
# for(o in Packages){
#   #if(!require(o,character.only = TRUE, quietly = TRUE)) BiocManager::install(o)
#   library(o,character.only = TRUE)
# }
# 
# #devtools::install_github("jbisanz/qiime2R")
# #devtools::install_github("https://github.com/smped/ngsReports/tree/RELEASE_3_17")
# # remotes::install_github("https://github.com/YuLab-SMU/ggtree",dependencies = T)
# # devtools::install_github("https://github.com/yiluheihei/microbiomeMarker/tree/devel",dependencies = T,force= T,build = TRUE)
# # BiocManager::install("karyoploteR")
# k = c("qiime2R", "ngsReports")
# for(k in Packages){
#   #if(!require(o,character.only = TRUE, quietly = TRUE)) BiocManager::install(o)
#   library(k,character.only = TRUE)
# }

library(dplyr)
library(datasets)
library(ggplot2)
library(ngsReports)

```

```{r}
#| echo: false
#| message: false
#| warning: false
#| code-fold: true


# clear workspace
rm(list = ls())
path <- paste0(getwd(), "/", params$fastqc_dir)

```

# Quality control

```{r ngsreports_datalist}
#| echo: false
#| message: false
#| warning: false
#| code-fold: true
#| layout-ncol: 1

# Put all fastqc.zip files into a directory
# Quality control raw reads
files_raw <- list.files(path,
                        pattern = "fastqc.zip$", full.names = T)


fdl_raw <- ngsReports::FastqcDataList(files_raw)

# writeHtmlReport(fileDir)
summary_raw <- ngsReports::getModule(fdl_raw, "Summary")
reads_raw <- ngsReports::readTotals(fdl_raw)

```

## Summary

```{r}
#| echo: false
#| message: false
#| warning: false
#| code-fold: true
#| layout-ncol: 2
#| out-width: 100%

i <- 1
step <- 9  # Set the step size as needed

while (i <= length(fdl_raw)) {
  j <- i + step
  if (j > length(fdl_raw)) {
    j <- length(fdl_raw)
  }

  print(ngsReports::plotSummary(fdl_raw[i:j]))

  i <- i + 10
}
```

## Total of reads

```{r}
#| echo: false
#| message: false
#| warning: false
#| code-fold: true
#| layout-ncol: 1
#| out-width: 100%


reads_raw %>%
  arrange(Total_Sequences) %>%
  # setnames("Total_Sequences", "Total_Sequences-raw_data") %>%
  kableExtra::kbl() %>%
  # Determina estilo e largura da tabela
  kableExtra::kable_classic(full_width = T, html_font = "Cambria") %>%
  kableExtra::kable_styling(full_width = T)


```

```{r}
#| echo: false
#| message: false
#| warning: false
#| code-fold: true
#| layout-ncol: 2
#| out-width: 100%

i <- 1
step <- 9  # Set the step size as needed

while (i <= length(fdl_raw)) {
  j <- i + step
  if (j > length(fdl_raw)) {
    j <- length(fdl_raw)
  }

  print(ngsReports::plotReadTotals(fdl_raw[i:j])) +
    theme(
        legend.position = c(1, 1),
        legend.justification = c(1, 1),
        legend.background = element_rect(colour = "black"))

  i <- i + 10
}
```

## Sequence length

```{r}
#| echo: false
#| message: false
#| warning: false
#| code-fold: true
#| layout-ncol: 1
#| out-width: 100%


plotSeqLengthDistn(
  fdl_raw,
  usePlotly = F,
  plotType = "line",
  counts = T,
  cluster = F,
  expand.x = expansion(0, 0)
) + guides(color = FALSE) +
   theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1, size = 7)) +
   scale_x_discrete(guide = guide_axis(n.dodge = 2))


```

## Per Base Sequence Qualities

```{r}
#| echo: false
#| message: false
#| warning: false
#| code-fold: true
#| layout-ncol: 2
#| out-width: 100%


counter <- nrow(as.data.frame(files_raw))


for (i in seq(1, length(fdl_raw))) {
  # print(i)
  print(plotBaseQuals(fdl_raw[i],
               plotType = "boxplot"))
  # i = i + 1
}

```

## Mean Sequence Quality Per Read

```{r}
#| echo: false
#| message: false
#| warning: false
#| code-fold: true
#| layout-ncol: 2
#| out-width: 100%

i <- 1
step <- 9  # Set the step size as needed

while (i <= length(fdl_raw)) {
  j <- i + step
  if (j > length(fdl_raw)) {
    j <- length(fdl_raw)
  }

  print(ngsReports::plotSeqQuals(fdl_raw[i:j], plotType = "line")) +
    theme(
        legend.position = c(1, 1),
        legend.justification = c(1, 1),
        legend.background = element_rect(colour = "black"))

  i <- i + 10
}
```

## Per Base Sequence Content

```{r}
#| echo: false
#| message: false
#| warning: false
#| code-fold: true
#| layout-ncol: 2
#| out-width: 100%


counter <- nrow(as.data.frame(files_raw))

for (i in seq(1, length(fdl_raw))) {
  k = i + 1
  print(plotSeqContent(fdl_raw[i],
               plotType = "line", nc = 1))

 }

```

## Adapter Content
```{r}
#| echo: false
#| message: false
#| warning: false
#| code-fold: true
#| layout-ncol: 1
#| out-width: 100%




# plotAdapterContent(fdl_raw,
#                    plotType = "line",
#                    adapterType = "Total") + theme(legend.position = "none")
# 
# for (i in seq(1, 84, 21)) {
#   j = i + 20
# 
#   print(plotAdapterContent(fdl_raw[i:j],
#              plotType = "line",
#                    adapterType = "Total"))
# }
# plotAdapterContent(files_trimmo,
#                    plotType = "line",
#                    adapterType = "Total")
# plotAdapterContent(files_SE,
#                    plotType = "line",
#                    adapterType = "Total")


i <- 1
step <- 9  # Set the step size as needed

while (i <= length(fdl_raw)) {
  j <- i + step
  if (j > length(fdl_raw)) {
    j <- length(fdl_raw)
  }

  print(plotAdapterContent(fdl_raw[i:j],
             plotType = "line",
                   adapterType = "Total"))

  i <- i + 10
}
```

## Sequence Duplication Levels

```{r}
#| echo: false
#| message: false
#| warning: false
#| code-fold: true
#| layout-ncol: 1
#| out-width: 100%


plotDupLevels(fdl_raw[1:nrow(as.data.frame(files_raw))],
               plotType = "line",                                         # replicate multiple individual plots
               nc = 1) + theme(legend.position = "none")




```

## GC content

```{r}
#| echo: false
#| message: false
#| warning: false
#| code-fold: true
#| layout-ncol: 1
#| out-width: 100%

plotGcContent(fdl_raw[1:nrow(as.data.frame(files_raw))],
               plotType = "line",                                          # replicate multiple individual plots
               nc = 1) + theme(legend.position = "none")

```

## Overrepresented Sequences

```{r}
#| echo: false
#| message: false
#| warning: false
#| code-fold: true
#| layout-ncol: 2
#| out-width: 100%

i <- 1
step <- 9  # Set the step size as needed

while (i <= length(fdl_raw)) {
  j <- i + step
  if (j > length(fdl_raw)) {
    j <- length(fdl_raw)
  }

  print(ngsReports::plotOverrep(fdl_raw[i:j], plotType = "line",
                                nc = 1)) +
    theme(
        legend.position = c(1, 1),
        legend.justification = c(1, 1),
        legend.background = element_rect(colour = "black"))

  i <- i + 10
}
```

# ITS

```{r its_folders}
#| echo: false
#| message: false
#| warning: false
#| code-fold: true
#| out-width: 100%
#############################################################
###################UPLOAD QZA AS PHYLOSEQ####################
#############################################################
folder_full <- paste0(getwd())
#folder_full
# 
metadata <- read.csv2(paste0(folder_full, "/metadata-file.txt"),
                      sep = "\t")
# 
## importar arquivos qza para phyloseq object
sklearn_phylo <- qiime2R::qza_to_phyloseq(features = paste0(folder_full, "/table-denoised.qza"), taxonomy = paste0(folder_full,"/sklearn-taxonomyITS.qza"))

```

## Denoise stats

```{r denoise}
#| echo: false
#| message: false
#| warning: false
#| code-fold: true
#| layout-ncol: 1
#| column: screen
#| out-width: 100%


# importar arquivo qza
# denoise <- qiime2R::read_qza(paste0(folder_full, '/denoise-stats.qza'))
# 
# 
# # tabela com mÃ©tricas denoising
# denoise[["data"]] %>% 
#   arrange(input) %>% 
#   kableExtra::kbl(caption = "Denoising stats", align = "rccccc") %>%
#   # Determina estilo e largura da tabela
#   kableExtra::kable_classic(full_width = F, 
#                 html_font = "Cambria", 
#                 lightable_options = "basic") 

```

## Alpha-rarefaction

```{r alphararefaction}
#| echo: false
#| message: false
#| warning: false
#| code-fold: true
#| layout-ncol: 1
#| out-width: 100%
############################################################
################Alpha-rarefaction silva full################
############################################################
# #expoort otu table
# rare_full_t <- phyloseq::otu_table(sklearn_phylo)
# #change class
# class(rare_full_t) <- "matrix"
# #transpose matrix
# rare_full_t <- t(rare_full_t)
# #rarefy species richness
# rare_full_t_out <- vegan::rarecurve(rare_full_t, step = 10000, tidy = T)
# 
# 
# #plot
# plot <- ggplot(data=rare_full_t_out, aes(x=Sample, y=Species,group=Site)) +
#   geom_line(aes(color=Site)) +
#   geom_point() 
# 
# legend <- get_legend(plot)
# plot2 <- plot + theme(legend.position = "none")
# 
# 
# plot(plot2)
#plot(legend)
```

## Taxonomy

```{r taxonomy}
#| echo: false
#| message: false
#| warning: false
#| code-fold: true
#| layout-ncol: 1
#| column: screen


```

```{r}
# its <- read.csv2(paste0(folder_full, "/final_table.csv"),
#                  sep = "\t", check.names = F) %>% 
#   setnames("Unnamed: 0", "Sample")
# 
# 
# its2 <- its %>% 
#   pivot_wider(names_from = Tool,
#               values_from = Count,
#               values_fill = "0") %>% 
#   arrange(Sample) %>% 
#   group_by(Sample) %>% as.data.frame()
# 
# write_csv2(its2, file = paste0(folder_full, "/its_out.csv"))
# 
# its2 %>%
#   kableExtra::kbl(caption = "Taxonomy", align = "ccc") %>%
#   # Determina estilo e largura da tabela
#   kableExtra::kable_classic(full_width = T, 
#                 html_font = "Cambria", 
#                 lightable_options = "basic") %>% 
#   # Mescla c?lulas que s?o identicas na coluna 1
#   kableExtra::collapse_rows(columns = 1) %>%
#   # Insere tra?o horizontal entre as linhas enumeradas em c() 
#   kableExtra::row_spec(row = c(1:nrow(its2)), extra_css = "border-bottom: 1px solid")
#| echo: false
#| message: false
#| warning: false
#| code-fold: true
#| layout-ncol: 1
#| out-width: 100%
#| column: screen

# save.image(file='G:/Meu Drive/wgs/Auto_user_GSS5PL-0214-25-25_09_2023_16S_ITS_CHIP_520_270_bp_241/fastq_raw_Environment.RData')
# 	
# quit(save='no')
# 
# load(file='G:/Meu Drive/wgs/Auto_user_GSS5PL-0214-25-25_09_2023_16S_ITS_CHIP_520_270_bp_241/fastq_raw_Environment.RData')
```

## Session Info

```{r}
#| echo: false
#| message: false
#| warning: false

sessionInfo()
```
